/*
 * Kernel
 */
memory KSTACK_SIZE	4096	    // Kernel stack size
memory IRQSTACK_SIZE	4096	    // IRQ stack size
option TIME_SLICE_MS	50	    // milliseconds
option HZ		1000
option PAGE_SIZE	0x1000
memory PAGE_OFFSET	0x00000000
option MA_NORMAL_ATTR	(MA_SPEED_0)	// Normal allocations in DRAM

/*
 * Memory layout
 */
memory DRAM_BASE	0x80000000
memory DRAM_SIZE	0x2000000
memory ITCM_BASE	0x0
memory ITCM_SIZE	0x8000
memory DMA_BASE		0x20200000
memory DMA_SIZE		0x8000
memory DTCM_BASE	0x20000000
#if defined(CONFIG_OCRAM2_SIZE)
/* Cache coherent DMA region in OCRAM2 */
memory DTCM_SIZE	(CONFIG_FLEXRAM_SIZE - CONFIG_ITCM_SIZE)
memory SRAM_BASE	(0x20200000 + CONFIG_DMA_SIZE)
memory SRAM_SIZE	(CONFIG_OCRAM2_SIZE - CONFIG_DMA_SIZE)
option MA_FAST_ATTR	(MA_SPEED_1)	// Fast allocations in SRAM
#else
/* Cache coherent DMA region in FlexRAM */
memory DTCM_SIZE	(CONFIG_FLEXRAM_SIZE - CONFIG_ITCM_SIZE - CONFIG_DMA_SIZE)
option MA_FAST_ATTR	(MA_SPEED_0)	// Fast allocations in DRAM
#endif
memory LOADER_RAM_SIZE	0x2000
memory LOADER_RAM_BASE	(CONFIG_DTCM_BASE_VIRT + CONFIG_DTCM_SIZE - CONFIG_LOADER_RAM_SIZE)

/*
 * Kernel null pointer guard
 */
memory KERNEL_NULL_GUARD_SIZE 1024

/*
 * Driver frameworks
 */
driver sys/dev/usb				// Generic USB support
driver sys/dev/usb/gadget()			// USB gadget userspace interface
driver sys/dev/usb/gadget/function/cdc_acm()	// USB abstract control model function
driver sys/dev/mmc				// Generic SD/MMC support
driver sys/dev/regulator/voltage		// Generic voltage regulator support
driver sys/dev/gpio				// Generic GPIO support

/*
 * GPIO controllers
 */
driver sys/dev/fsl/imxrt10xx-gpio{.name = "gpio1", .base = 0x401b8000, .irqs = {80, 81}, .ipl = IPL_MIN}
driver sys/dev/fsl/imxrt10xx-gpio{.name = "gpio2", .base = 0x401bc000, .irqs = {82, 83}, .ipl = IPL_MIN}
driver sys/dev/fsl/imxrt10xx-gpio{.name = "gpio3", .base = 0x401c0000, .irqs = {84, 85}, .ipl = IPL_MIN}
driver sys/dev/fsl/imxrt10xx-gpio{.name = "gpio4", .base = 0x401c4000, .irqs = {86, 87}, .ipl = IPL_MIN}
driver sys/dev/fsl/imxrt10xx-gpio{.name = "gpio5", .base = 0x400c0000, .irqs = {88, 89}, .ipl = IPL_MIN}

/*
 * On/Off Switchable SD Card power supply
 *
 * On IMXRT1050-EVKB this is broken as the card detect circuit is tied to this
 * same power supply. Switching the supply off means that a card can no longer
 * be detected. This is fixed in MIMXRT1060-EVK.
 */
#if defined(CONFIG_BOARD_IMXRT1050EVKB)
driver1 sys/dev/regulator/voltage/fixed{.name = "VSD_3V3", .voltage = 3.3}
#elif defined(CONFIG_BOARD_MIMXRT1060EVK)
pincfg write32(&IOMUXC->SW_MUX_CTL_PAD_GPIO_AD_B1_03, (iomuxc::sw_mux_ctl){{ .MUX_MODE = 5, .SION = iomuxc::sw_mux_ctl::sion::Software_Input_On_Disabled }}.r)
pincfg write32(&IOMUXC->SW_PAD_CTL_PAD_GPIO_AD_B1_03, (iomuxc::sw_pad_ctl){{ .SRE = iomuxc::sw_pad_ctl::sre::Slow, .DSE = iomuxc::sw_pad_ctl::dse::R0_6, .SPEED = iomuxc::sw_pad_ctl::speed::MHz_50, .ODE = iomuxc::sw_pad_ctl::ode::Open_Drain_Enabled, .PKE = iomuxc::sw_pad_ctl::pke::Pull_Keeper_Disabled, .HYS = iomuxc::sw_pad_ctl::hys::Hysteresis_Disabled}}.r)
driver1 sys/dev/regulator/voltage/gpio{.name = "VSD_3V3", \
	.gpios = {{"gpio1", 19}}, \
	.states = {{0x0, 0.0}, {0x1, 3.3}}, .startup = 0}
#else
#error Unknown Board
#endif

/*
 * 1.8/3.3V Switchable SD Card I/O supply
 */
pincfg write32(&IOMUXC->SW_MUX_CTL_PAD_GPIO_B1_14, (iomuxc::sw_mux_ctl){{ .MUX_MODE = 5, .SION = iomuxc::sw_mux_ctl::sion::Software_Input_On_Disabled }}.r)
pincfg write32(&IOMUXC->SW_PAD_CTL_PAD_GPIO_B1_14, (iomuxc::sw_pad_ctl){{ .SRE = iomuxc::sw_pad_ctl::sre::Slow, .DSE = iomuxc::sw_pad_ctl::dse::R0_6, .SPEED = iomuxc::sw_pad_ctl::speed::MHz_50, .ODE = iomuxc::sw_pad_ctl::ode::Open_Drain_Disabled, .PKE = iomuxc::sw_pad_ctl::pke::Pull_Keeper_Disabled, .HYS = iomuxc::sw_pad_ctl::hys::Hysteresis_Disabled}}.r)
driver1 sys/dev/regulator/voltage/gpio{.name = "NVCC_SD", \
	.gpios = {{"gpio2", 30}}, \
	.states = {{0x1, 1.8}, {0x0, 3.3}}, .startup = 1}

/*
 * SYSTICK clock source: 24 MHz XTALOSC
 * This is divided down to 100KHz before it reaches SYSTICK
 */
driver-1 sys/dev/arm/armv7m-systick{.clock = 100000, .clksource = 0}

/*
 * LPUART1 is connected to serial->USB bridge
 * GPIO_AD_B0_12 as LPUART1_TX
 * GPIO_AD_B0_13 as LPUART1_RX
 */
pincfg write32(&IOMUXC->SW_MUX_CTL_PAD_GPIO_AD_B0_12, (iomuxc::sw_mux_ctl){{ .MUX_MODE = 2, .SION = iomuxc::sw_mux_ctl::sion::Software_Input_On_Disabled }}.r)
pincfg write32(&IOMUXC->SW_PAD_CTL_PAD_GPIO_AD_B0_12, (iomuxc::sw_pad_ctl){{ .SRE = iomuxc::sw_pad_ctl::sre::Slow, .DSE = iomuxc::sw_pad_ctl::dse::R0_6, .SPEED = iomuxc::sw_pad_ctl::speed::MHz_100, .ODE = iomuxc::sw_pad_ctl::ode::Open_Drain_Disabled, .PKE = iomuxc::sw_pad_ctl::pke::Pull_Keeper_Enabled, .PUE = iomuxc::sw_pad_ctl::pue::Keeper, .PUS = iomuxc::sw_pad_ctl::pus::Pull_Down_100K, .HYS = iomuxc::sw_pad_ctl::hys::Hysteresis_Disabled}}.r)
pincfg write32(&IOMUXC->SW_MUX_CTL_PAD_GPIO_AD_B0_13, (iomuxc::sw_mux_ctl){{ .MUX_MODE = 2, .SION = iomuxc::sw_mux_ctl::sion::Software_Input_On_Disabled }}.r)
pincfg write32(&IOMUXC->SW_PAD_CTL_PAD_GPIO_AD_B0_13, (iomuxc::sw_pad_ctl){{ .SRE = iomuxc::sw_pad_ctl::sre::Slow, .DSE = iomuxc::sw_pad_ctl::dse::R0_6, .SPEED = iomuxc::sw_pad_ctl::speed::MHz_100, .ODE = iomuxc::sw_pad_ctl::ode::Open_Drain_Disabled, .PKE = iomuxc::sw_pad_ctl::pke::Pull_Keeper_Enabled, .PUE = iomuxc::sw_pad_ctl::pue::Keeper, .PUS = iomuxc::sw_pad_ctl::pus::Pull_Down_100K, .HYS = iomuxc::sw_pad_ctl::hys::Hysteresis_Disabled}}.r)
driver sys/dev/fsl/lpuart{.name = "ttyS0", .base = 0x40184000, .clock = 24000000, .ipl = IPL_MIN, .rx_tx_int = 20}

/*
 * USB OTG is connected to J9
 * GPIO_AD_B0_01 as USB_OTG1_ID
 * GPIO_AD_B0_02 as USB_OTG1_PWR (via DNP R329)
 * GPIO_AD_B0_03 as USB_OTG1_OC (over current fault)
 * USB_OTG1_DN as USB_OTG1_DN
 * USB_OTG1_DP as USB_OTG1_DP
 */
machcfg write32(&CCM_ANALOG->PLL_USB1_SET, (ccm_analog::pll_usb){{ .EN_USB_CLKS = 1 }}.r)
machcfg write32(&PMU->REG_3P0, (pmu::reg_3p0){{ \
	.ENABLE_LINREG = 1, \
	.ENABLE_BO = 1, \
	.ENABLE_ILIMIT = 1, \
	.BO_OFFSET = 0x7, \
	.OUTPUT_TRG = 0x17, \
}}.r)
driver1 sys/dev/fsl/imx-usbphy{ .base = 0x400d9000, .analog_base = 0x400d81a0, .d_cal = 0x0c, .txcal45dp = 0x06, .txcal45dn = 0x06 }
driver2 sys/dev/fsl/usb2-udc{ .name = "udc0", .base = 0x402e0000, .irq = 113, .ipl = IPL_MIN }

/*
 * USDHC1 is connected to microSD card slot
 * GPIO_SD_B0_00 as SD1_CMD
 * GPIO_SD_B0_01 as SD1_CLK
 * GPIO_SD_B0_02 as SD1_D0
 * GPIO_SD_B0_03 as SD1_D1
 * GPIO_SD_B0_04 as SD1_D2
 * GPIO_SD_B0_05 as SD1_D3
 * GPIO_B1_12 as SD_CD_SW
 * GPIO_B1_14 as SD0_VSELECT (3.3V/1.8V i/o supply, see NVCC_SD)
 */
pincfg write32(&IOMUXC->SW_MUX_CTL_PAD_GPIO_SD_B0_00, (iomuxc::sw_mux_ctl){{ .MUX_MODE = 0, .SION = iomuxc::sw_mux_ctl::sion::Software_Input_On_Disabled }}.r)
pincfg write32(&IOMUXC->SW_PAD_CTL_PAD_GPIO_SD_B0_00, (iomuxc::sw_pad_ctl){{ .SRE = iomuxc::sw_pad_ctl::sre::Fast, .DSE = iomuxc::sw_pad_ctl::dse::R0_7, .SPEED = iomuxc::sw_pad_ctl::speed::MHz_200, .ODE = iomuxc::sw_pad_ctl::ode::Open_Drain_Disabled, .PKE = iomuxc::sw_pad_ctl::pke::Pull_Keeper_Enabled, .PUE = iomuxc::sw_pad_ctl::pue::Keeper, .PUS = iomuxc::sw_pad_ctl::pus::Pull_Down_100K, .HYS = iomuxc::sw_pad_ctl::hys::Hysteresis_Enabled}}.r)
pincfg write32(&IOMUXC->SW_MUX_CTL_PAD_GPIO_SD_B0_01, (iomuxc::sw_mux_ctl){{ .MUX_MODE = 0, .SION = iomuxc::sw_mux_ctl::sion::Software_Input_On_Disabled }}.r)
pincfg write32(&IOMUXC->SW_PAD_CTL_PAD_GPIO_SD_B0_01, (iomuxc::sw_pad_ctl){{ .SRE = iomuxc::sw_pad_ctl::sre::Fast, .DSE = iomuxc::sw_pad_ctl::dse::R0_7, .SPEED = iomuxc::sw_pad_ctl::speed::MHz_200, .ODE = iomuxc::sw_pad_ctl::ode::Open_Drain_Disabled, .PKE = iomuxc::sw_pad_ctl::pke::Pull_Keeper_Disabled, .HYS = iomuxc::sw_pad_ctl::hys::Hysteresis_Disabled}}.r)
pincfg write32(&IOMUXC->SW_MUX_CTL_PAD_GPIO_SD_B0_02, (iomuxc::sw_mux_ctl){{ .MUX_MODE = 0, .SION = iomuxc::sw_mux_ctl::sion::Software_Input_On_Disabled }}.r)
pincfg write32(&IOMUXC->SW_PAD_CTL_PAD_GPIO_SD_B0_02, (iomuxc::sw_pad_ctl){{ .SRE = iomuxc::sw_pad_ctl::sre::Fast, .DSE = iomuxc::sw_pad_ctl::dse::R0_7, .SPEED = iomuxc::sw_pad_ctl::speed::MHz_200, .ODE = iomuxc::sw_pad_ctl::ode::Open_Drain_Disabled, .PKE = iomuxc::sw_pad_ctl::pke::Pull_Keeper_Enabled, .PUE = iomuxc::sw_pad_ctl::pue::Keeper, .PUS = iomuxc::sw_pad_ctl::pus::Pull_Down_100K, .HYS = iomuxc::sw_pad_ctl::hys::Hysteresis_Enabled}}.r)
pincfg write32(&IOMUXC->SW_MUX_CTL_PAD_GPIO_SD_B0_03, (iomuxc::sw_mux_ctl){{ .MUX_MODE = 0, .SION = iomuxc::sw_mux_ctl::sion::Software_Input_On_Disabled }}.r)
pincfg write32(&IOMUXC->SW_PAD_CTL_PAD_GPIO_SD_B0_03, (iomuxc::sw_pad_ctl){{ .SRE = iomuxc::sw_pad_ctl::sre::Fast, .DSE = iomuxc::sw_pad_ctl::dse::R0_7, .SPEED = iomuxc::sw_pad_ctl::speed::MHz_200, .ODE = iomuxc::sw_pad_ctl::ode::Open_Drain_Disabled, .PKE = iomuxc::sw_pad_ctl::pke::Pull_Keeper_Enabled, .PUE = iomuxc::sw_pad_ctl::pue::Keeper, .PUS = iomuxc::sw_pad_ctl::pus::Pull_Down_100K, .HYS = iomuxc::sw_pad_ctl::hys::Hysteresis_Enabled}}.r)
pincfg write32(&IOMUXC->SW_MUX_CTL_PAD_GPIO_SD_B0_04, (iomuxc::sw_mux_ctl){{ .MUX_MODE = 0, .SION = iomuxc::sw_mux_ctl::sion::Software_Input_On_Disabled }}.r)
pincfg write32(&IOMUXC->SW_PAD_CTL_PAD_GPIO_SD_B0_04, (iomuxc::sw_pad_ctl){{ .SRE = iomuxc::sw_pad_ctl::sre::Fast, .DSE = iomuxc::sw_pad_ctl::dse::R0_7, .SPEED = iomuxc::sw_pad_ctl::speed::MHz_200, .ODE = iomuxc::sw_pad_ctl::ode::Open_Drain_Disabled, .PKE = iomuxc::sw_pad_ctl::pke::Pull_Keeper_Enabled, .PUE = iomuxc::sw_pad_ctl::pue::Keeper, .PUS = iomuxc::sw_pad_ctl::pus::Pull_Down_100K, .HYS = iomuxc::sw_pad_ctl::hys::Hysteresis_Enabled}}.r)
pincfg write32(&IOMUXC->SW_MUX_CTL_PAD_GPIO_SD_B0_05, (iomuxc::sw_mux_ctl){{ .MUX_MODE = 0, .SION = iomuxc::sw_mux_ctl::sion::Software_Input_On_Disabled }}.r)
pincfg write32(&IOMUXC->SW_PAD_CTL_PAD_GPIO_SD_B0_05, (iomuxc::sw_pad_ctl){{ .SRE = iomuxc::sw_pad_ctl::sre::Fast, .DSE = iomuxc::sw_pad_ctl::dse::R0_7, .SPEED = iomuxc::sw_pad_ctl::speed::MHz_200, .ODE = iomuxc::sw_pad_ctl::ode::Open_Drain_Disabled, .PKE = iomuxc::sw_pad_ctl::pke::Pull_Keeper_Enabled, .PUE = iomuxc::sw_pad_ctl::pue::Keeper, .PUS = iomuxc::sw_pad_ctl::pus::Pull_Down_100K, .HYS = iomuxc::sw_pad_ctl::hys::Hysteresis_Enabled}}.r)
pincfg write32(&IOMUXC->SW_MUX_CTL_PAD_GPIO_B1_12, (iomuxc::sw_mux_ctl){{ .MUX_MODE = 6, .SION = iomuxc::sw_mux_ctl::sion::Software_Input_On_Disabled }}.r)
pincfg write32(&IOMUXC->SW_PAD_CTL_PAD_GPIO_B1_12, (iomuxc::sw_pad_ctl){{ .SRE = iomuxc::sw_pad_ctl::sre::Slow, .DSE = iomuxc::sw_pad_ctl::dse::R0_6, .SPEED = iomuxc::sw_pad_ctl::speed::MHz_50, .ODE = iomuxc::sw_pad_ctl::ode::Open_Drain_Enabled, .PKE = iomuxc::sw_pad_ctl::pke::Pull_Keeper_Enabled, .PUE = iomuxc::sw_pad_ctl::pue::Keeper, .HYS = iomuxc::sw_pad_ctl::hys::Hysteresis_Enabled}}.r)
pincfg write32(&IOMUXC->USDHC1_CD_B_SELECT_INPUT, 2);
driver2 sys/dev/fsl/usdhc{ \
	.mmc = {.name = "usdhc0", .removable = true, .data_lines = 4, \
	    .power_stable_delay_ms = 1, .power_off_delay_ms = 1, \
	    .vcc_supply = {"VSD_3V3"}, .vio_supply = {"NVCC_SD"}, \
	    .vccq_supply = {"VSD_3V3"}, .load_capacitance_pf = 15, \
	    .max_rate = 198000000}, \
	.base = 0x402c0000, .clock = 198000000, .irq = 110, .ipl = IPL_MIN, \
}

/*
 * Include helpful "make gdb" rule
 */
mk cpu/nxp/imxrt10xx/gdb.mk
