#! /bin/sh

quit()
{
	cat >&2 <<ERRORMSG

ERROR: $@
ERRORMSG
	exit 1
}

usage()
{
	if [ -n "$*" ]; then
		echo "configure: $*"
	fi
	cat <<USAGE
Usage: configure [options]

 General options:
    --project=PROJECT	    Project configuration
    --machine=MACHINE	    Machine configuration (optional)
    --cpu=CPU		    CPU configuration (optional)
    --cross-compile=PREFIX  Prefix for cross-compile tools (optional)
    --srcdir=RELATIVE	    Relative path to project source directory (optional)
    --nodebug		    Globally define NDEBUG
    --quiet		    Be quiet
USAGE
	exit 1
}

parse_args()
{
	while [ $# != 0 ]; do
		case $1 in
		--*=*)
			option=$(expr "x$1" : 'x\([^=]*\)=')
			optarg=$(expr "x$1" : 'x[^=]*=\(.*\)')
			;;
		--*)
			option=$1
			;;
		*)
			usage "unrecognized option $1"
			;;
		esac

		case $option in
		--help)
			usage
			;;
		--srcdir)
			srcdir=$(cd "$apexdir/$optarg" && pwd)
			;;
		--project)
			project=$optarg
			;;
		--machine)
			machine=$optarg
			;;
		--cpu)
			cpu=$optarg
			;;
		--cross-compile)
			cross=$optarg
			;;
		--nodebug)
			nodebug="y"
			;;
		--quiet)
			print="true ||"
			;;
		*)
			usage "unrecognized option $1"
			;;
		esac
		shift
	done
}

find_config()
{
	# $1: result variable
	# $2: config type (project, cpu, machine)
	# $3: config name
	f=$3
	[ -f "$f" ] ||
		f=$srcdir/$3
	[ -f "$f" ] ||
		f=$srcdir/$2/$3
	[ -f "$f" ] ||
		f=$srcdir/conf/$2/$3
	[ -f "$f" ] ||
		f=$srcdir/$2/$3/conf/default
	[ -f "$f" ] ||
		f=$apexdir/$3
	[ -f "$f" ] ||
		f=$apexdir/$2/$3
	[ -f "$f" ] ||
		f=$apexdir/$2/$3/conf/default
	[ -f "$f" ] ||
		quit "can not find configuration file $3"
	eval "$1"="$f"
}

parse_config()
{
	$print "Processing configuration file $1..."
	while read -r cmd rest; do
		case $cmd in
		option)
			param=$(expr "x$rest" : 'x\([^=[:space:]]*\)')
			value=$(expr "x$rest" : 'x[^=[:space:]]*=*[[:space:]]*\(.*\)')
			if [ "x$value" = x ] ; then
				echo "CONFIG_$param := y" >> "$CONFIG_MK"
				echo "#define CONFIG_$param 1" >> "$CONFIG_H"
			else
				echo "CONFIG_$param := $value" >> "$CONFIG_MK"
				case $value in
				\(*\))
					# Leave bracketed expressions alone
					echo "#define CONFIG_$param $value" >> "$CONFIG_H"
					;;
				.|*.*.*|e*|*e|*e*e*|x*|*x|*x*x*|*[!0-9.ex]*)
					# Quote anything that isn't obviously a number
					echo "#define CONFIG_$param \"$value\"" >> "$CONFIG_H"
					;;
				*)
					# Don't quote numbers
					echo "#define CONFIG_$param $value" >> "$CONFIG_H"
					;;
				esac
			fi
			[ "$param" = FPU ] && hf=hf
			;;
		makeoption)
			echo "CONFIG_$rest" >> "$CONFIG_MK"
			;;
		memory)
			param=$(expr "x$rest" : 'x\([^=[:space:]]*\)')
			value=$(expr "x$rest" : 'x[^=[:space:]]*=*[[:space:]]*\(.*\)')
			if [ -z "${param##*_BASE}" ]; then
				echo "CONFIG_${param}_VIRT = $value;" >> "$CONFIG_LD"
				echo "CONFIG_${param}_PHYS = ($value - CONFIG_PAGE_OFFSET);" >> "$CONFIG_LD"
				echo "#define CONFIG_${param}_VIRT $value" >> "$CONFIG_H"
				echo "#define CONFIG_${param}_PHYS ($value - CONFIG_PAGE_OFFSET)" >> "$CONFIG_H"
			else
				echo "CONFIG_${param} = $value;" >> "$CONFIG_LD"
				echo "#define CONFIG_${param} $value" >> "$CONFIG_H"
			fi
			;;
		bootimgfile)
			# Automatically build boot image files as required
			[ ! -f "$srcdir/$rest" ] &&
				echo "MK += $rest.mk" >> "$CONFIG_MK"
			echo "CONFIG_BOOTIMGFILES += $rest" >> "$CONFIG_MK"
			;;
		bootfile)
			# Automatically build boot archive files as required
			[ ! -f "$srcdir/$rest" ] &&
				echo "MK += $rest.mk" >> "$CONFIG_MK"
			echo "CONFIG_BOOTFILES += $rest" >> "$CONFIG_MK"
			;;
		driver*)
			order=$(expr "$cmd" : 'driver\(.*\)')
			path=$(expr "$rest" : '\([^({<[:space:]]*\)')
			name=$(expr "$path" : '.*dev/\(.*\)')
			name=${name:="$path"}
			c_name=$(echo "$name" | tr '/-' '_')
			template=$(expr "$rest" : '[^({<]*\([^({]*>\)')
			decls=
			args=$(expr "$rest" : '[^{(]*\(.*\)')
			case $args in
			'')
				# driver a/b/x -> no initialisation
				;;
			\(*)
				# driver a/b/x(...) -> x_init(...);
				;;
			\{*)
				# driver a/b/x{...} -> x_init(&(struct x_desc){...});
				decls="static const struct $c_name""_desc"" desc = $args;"
				args="(&desc)"
				;;
			esac

			if [ "x$order" = x ]; then
				order=0
			fi

			if [ "x$args" != x ]; then
				echo "#include <$path/init.h>" >> "$DRIVERS_H"
				echo "/* $order */ { $decls $c_name""_init$template$args; }" >> "$DRIVERS_C"
			fi
			echo "CONFIG_DRIVER_LIST += $path" >> "$CONFIG_MK"
			;;
		machcfg)
			echo "$rest;" >> "$MACHCFG_C"
			;;
		pincfg)
			echo "$rest;" >> "$PINCFG_C"
			;;
		filesystem)
			echo "CONFIG_FS += $rest" >> "$CONFIG_MK"
			;;
		include)
			find_config I "" "$rest"
			INCLUDE_IN="$INCLUDE_IN $I"
			parse_config "$I"
			;;
		machine)
			[ "x$machine" != x ] &&
				quit "machine already specified"
			machine=$rest
			find_config MACHINE_IN machine "$machine"
			parse_config "$MACHINE_IN"
			machinedir=${MACHINE_IN%%/conf*}
			;;
		cpu)
			[ "x$cpu" != x ] &&
				quit "cpu already specified"
			cpu=$rest
			find_config CPU_IN cpu "$cpu"
			parse_config "$CPU_IN"
			;;
		arch)
			[ "x$arch" != x ] &&
				quit "arch already specified"
			arch=$rest
			;;
		subarch)
			[ "x$subarch" != x ] &&
				quit "subarch already specified"
			subarch=$rest
			;;
		cross-compile)
			[ "x$cross" != x ] &&
				quit "cross-compile already specified"
			cross=$rest
			;;
		nodebug)
			nodebug=y
			;;
		mk)
			echo "MK += $rest" >> "$CONFIG_MK"
			;;
		finalmk)
			echo "FINALMK += $rest" >> "$CONFIG_MK"
			;;
		build)
			echo "MK += $rest.mk" >> "$CONFIG_MK"
			echo "CONFIG_DEFAULT_TGTS += $rest" >> "$CONFIG_MK"
			;;
		"")
			;;
		*)
			quit "bad command \"$cmd $rest\""
			;;
		esac
	done <<-EOF
		$(cpp -include "$CONFIG_H" -P -Wno-builtin-macro-redefined -U__DATE__ -U__TIME__ -undef "$1")
	EOF
}

main()
{
	# Set default options
	a="/$0"; a=${a%/*}; a=${a:-.}; a=${a#/}/; apexdir=$(cd "$a" && pwd)
	srcdir="$apexdir"
	print="echo"
	builddir=$(pwd)

	# Process input arguments
	parse_args "$@"

	# Make sure we are not attempting to configure in $srcdir
	case $(readlink -f "$builddir")/ in $(readlink -f "$srcdir")/*)
		quit "in-tree build not supported"
	esac

	CONFIG_MK="conf/config.mk"
	CONFIG_H="conf/config.h"
	CONFIG_LD="conf/config.ld"
	DRIVERS_H="conf/drivers.h"
	DRIVERS_C="conf/drivers.c"
	PINCFG_C="conf/pincfg.c"
	MACHCFG_C="conf/machcfg.c"

	mkdir -p "$builddir/conf" ||
		quit "can not create $builddir/conf"

	{
		echo "#"
		echo "# config.mk - Automatically generated file. Do not edit."
		echo "#"
		echo
		echo "FINALMK :="
	} > "$CONFIG_MK"

	{
		echo "/*"
		echo " * config.h - Automatically generated file. Do not edit."
		echo " */"
		echo
	} > "$CONFIG_H"

	{
		echo "/*"
		echo " * config.ld - Automatically generated file. Do not edit."
		echo " */"
		echo
	} > "$CONFIG_LD"

	{
		echo "/*"
		echo " * drivers.h - Automatically generated file. Do not edit."
		echo " */"
		echo
	} > "$DRIVERS_H"
	: > "$DRIVERS_C"

	{
		echo "/*"
		echo " * pincfg.c - Automatically generated file. Do not edit."
		echo " */"
		echo
	} > "$PINCFG_C"

	{
		echo "/*"
		echo " * machcfg.c - Automatically generated file. Do not edit."
		echo " */"
		echo
	} > "$MACHCFG_C"

	# Handle --cpu option
	if [ "x$cpu" != x ]; then
		find_config CPU_IN cpu "$cpu"
		parse_config "$CPU_IN"
	fi

	# Handle --machine option
	if [ "x$machine" != x ]; then
		find_config MACHINE_IN machine "$machine"
		machine=${machine%%/conf*}
		parse_config "$MACHINE_IN"
		machinedir=${MACHINE_IN%%/conf*}
	fi

	# Handle --project option
	[ "x$project" = x ] &&
		quit "'--project' option not specified"
	find_config PROJECT_IN project "$project"
	parse_config "$PROJECT_IN"

	# Check options
	[ "x$machine" = x ] &&
		quit "no machine specified"
	[ "x$cpu" = x ] &&
		quit "no cpu specified"

	# Verify architecture is sane
	case $arch in
	arm|i386|powerpc)
		;;
	"")
		quit "Architecture not specified"
		;;
	*)
		quit "Unkown target architecture: $arch"
		;;
	esac

	# Guess cross compiler if it wasn't explicitly specified
	if [ "x$cross" = x ]; then
		cross=$arch$subarch-linux-musleabi$hf
		$print "Guessing cross compiler prefix... $cross"
	fi

	# Detect compiler type
	$print -n "Detecting compiler... "
	compiler_output=$("$cross"-cc -v 2>&1)
	case "$compiler_output" in
	*gcc\ version*)
		compiler=gcc
		;;
	*clang\ version*)
		compiler=clang
		;;
	*)
		quit "Unknown compiler, output was: $compiler_output"
		;;
	esac
	$print $compiler

	# Set general configuration options
	{
		echo "CONFIG_SRCDIR := $srcdir"
		echo "CONFIG_APEXDIR := $apexdir"
		echo "CONFIG_BUILDDIR := $builddir"
		echo "CONFIG_MACHINEDIR := $machinedir"
		echo "CONFIG_PROJECT := $project"
		echo "CONFIG_MACHINE := $machine"
		echo "CONFIG_CPU := $cpu"
		echo "CONFIG_ARCH := $arch"
		echo "CONFIG_CROSS_COMPILE := $cross-"
		echo "CONFIG_COMPILER := $compiler"
		echo "CONFIG_DRIVERS := \$(sort \$(CONFIG_DRIVER_LIST))"
		[ "x$subarch" != x ] &&
			echo "CONFIG_SUBARCH := $subarch"
		[ "x$nodebug" != x ] &&
			echo "CONFIG_DEFS += -DNDEBUG"
		echo "MK += \$(FINALMK)"
	} >> "$CONFIG_MK"

	{
		echo "#define CONFIG_PROJECT \"$project\""
		echo "#define CONFIG_MACHINE \"$machine\""
		echo "#define CONFIG_CPU \"$cpu\""
		echo "#define CONFIG_ARCH \"$arch\""
		if [ "x$subarch" != x ]; then
			echo "#define CONFIG_SUBARCH \"$subarch\""
			echo "#define CONFIG_SUBARCH_$subarch 1"
		fi
	} >> "$CONFIG_H"

	printf '/*\n * drivers.c - Automatically generated file. Do not edit.\n */\n\n%s' "$(sort -k 2 -n $DRIVERS_C)" > "$DRIVERS_C"

	# Write makefile
	cat > "$builddir/Makefile" <<MAKEFILE
#
# Automatically generated file. Do not edit.
#
include $CONFIG_MK
ifeq (\$(filter \$(CONFIG_SRCDIR),\$(.INCLUDE_DIRS)),)
    all: $CONFIG_MK
    $CONFIG_MK: $0 $PROJECT_IN $MACHINE_IN $CPU_IN $INCLUDE_IN
	\$(error config changed: please run 'configure')
    Makefile $0 $PROJECT_IN $MACHINE_IN $CPU_IN $INCLUDE_IN: ;
    .PHONY: force
    %:: force
    ifeq (\$(CONFIG_SRCDIR),\$(CONFIG_APEXDIR))
	\$(MAKE) \$(addprefix -I,\$(CONFIG_SRCDIR)) _MFLAGS="\$(MFLAGS)" -rR --warn-undefined-variables \$(MAKECMDGOALS)
    else
	\$(MAKE) \$(addprefix -I,\$(CONFIG_SRCDIR) \$(CONFIG_APEXDIR)) _MFLAGS="\$(MFLAGS)" -rR --warn-undefined-variables \$(MAKECMDGOALS)
    endif
else
    include mk/main.mk
endif
MAKEFILE

	# Print configuration
	$print "Apex configured for:"
	$print "    CPU:      $cpu"
	$print "    Machine:  $machine"
	$print "    Project:  $project"
	$print "    Compiler: $compiler"
}

main "$@"
