python
import os, time, subprocess, json, sys

trace32_cpu = {
	'nxp/MIMXRT1051': 'IMXRT1051',
	'nxp/MIMXRT1052': 'IMXRT1052',
	'nxp/MIMXRT1061': 'IMXRT1061',
	'nxp/MIMXRT1062': 'IMXRT1062',
}

if 'DEBUGGER' not in os.environ:
	trace32 = subprocess.run(['lsusb', '-d', '0897:'])
	jlink = subprocess.run(['lsusb', '-d', '1366:'])
	if trace32.returncode == 0:
		gdb.write('> Detected trace32 debugger\n')
		os.environ['DEBUGGER'] = 'trace32'
	elif jlink.returncode == 0:
		gdb.write('> Detected jlink debugger\n')
		os.environ['DEBUGGER'] = 'jlink'
	else:
		gdb.write('> No debugger detected\n')

def blhost(*args, jsonOutput=True):
	try:
		parameters = [
			os.environ['TOOLSDIR'] + '/blhost',
			'-u',
			'--',
		]
		for arg in args:
			parameters.append(arg)
		if jsonOutput == True:
			parameters.insert(2, '-j')
			hostOutput = subprocess.check_output(parameters)
			parsedOutput = json.loads(hostOutput)
			result = parsedOutput["status"]["value"]
			if result != 0:
				print("> Error: " + parsedOutput["status"]["description"])
				return 1
			else:
				return 0
		else:
			subprocess.call(parameters)
			return 0
	except:
		print("> Failed!")
		return 1

class reset(gdb.Command):
	"""Reset target device"""
	def __init__(self):
		super(reset, self).__init__ ("reset", gdb.COMMAND_USER)
	def execute(self):
		if 'DEBUGGER' not in os.environ:
			gdb.write('DEBUGGER is not set\n')
		elif os.environ['DEBUGGER'] == 'jlink':
			gdb.execute('mon reset')
		elif os.environ['DEBUGGER'] == 'trace32':
			gdb.execute('mon b::system.up')
		else:
			gdb.write('Unknown debugger "' + os.environ['DEBUGGER'])

		# Reset FlexRAM configuration as the boot ROM expects to use OCRAM as
		# stack and is too stupid to make sure it will actually work.
		gdb.execute('set *(int *)0x400ac040 = 0x00200003')
	def invoke(self, args, from_tty):
		self.execute()

class loadbin(gdb.Command):
	"""Load binary image to target device"""
	def __init__(self):
		super().__init__("loadbin", gdb.COMMAND_USER)
	def execute(self, filename, addr):
		if 'DEBUGGER' not in os.environ:
			gdb.write('DEBUGGER is not set\n')
		elif os.environ['DEBUGGER'] == 'jlink':
			gdb.execute('mon loadbin ' + filename + ' ' + hex(addr))
		elif os.environ['DEBUGGER'] == 'trace32':
			gdb.execute('mon b::data.load.binary ' + filename + ' ' + hex(addr))
		else:
			gdb.write('Unknown debugger "' + os.environ['DEBUGGER'])
	def invoke(self, args, from_tty):
		args = args.split()
		self.execute(args[0], int(args[1], 0))

class freerun(gdb.Command):
	"""Detach debugger and allow target to run"""
	def __init__(self):
		super().__init__("freerun", gdb.COMMAND_USER)
	def execute(self):
		if 'DEBUGGER' not in os.environ:
			gdb.write('DEBUGGER is not set\n')
		elif os.environ['DEBUGGER'] == 'jlink':
			gdb.execute('mon go')
		elif os.environ['DEBUGGER'] == 'trace32':
			gdb.execute('mon b::go')
		else:
			gdb.write('Unknown debugger "' + os.environ['DEBUGGER'])
	def invoke(self, args, from_tty):
		self.execute()

class runflashloader(gdb.Command):
	"""Load flash loader into RAM and execute it"""
	def __init__(self):
		super(runflashloader, self).__init__ ("runflashloader", gdb.COMMAND_USER)
	def execute(self):
		flashloaderAddress = 0x20000000
		# Location in the bin file where the IVT specifies the start address of the flashloader
		ivtEntryAddressOffset = 0x404
		reset.execute(self)
		print("> Loading flash loader...")
		loadbin.execute(self, os.environ['TOOLSDIR'] + '/ivt_flashloader.bin ', flashloaderAddress)
		# Set the PC to the start address of the flashloader
		gdb.execute('set $pc = *' + hex(flashloaderAddress + ivtEntryAddressOffset))
		print("> Executing flash loader...")
		freerun.execute(self);
		print("> Waiting for flash loader to start...")
		# Wait for flash loader to start and USB to enumerate
		# Attempt to connect to flash loader for 250ms * 40 = 10seconds
		flashloaderConnected = 0
		# Turn off python printing while looping checking for connectivity
		sys.stdout = open(os.devnull, 'w')
		for _ in range(40):
			if blhost('get-property', '1') == 0:
				flashloaderConnected = 1
				break
			else:
				time.sleep(0.25)
		# Turn back on python printing
		sys.stdout = sys.__stdout__
		if flashloaderConnected == 0:
			print("> Flash loader failed! No target device detected on USB")
			return 1
		else:
			print("> Flash loader running")
			return 0

	def invoke(self, args, from_tty):
		self.execute()

class sdflash(gdb.Command):
	"""Flash image onto SD Card"""
	def __init__(self):
		super(sdflash, self).__init__ ("sdflash", gdb.COMMAND_USER)
	def invoke(self, args, from_tty):
		configurationMemoryAddress = 0x20000000
		sdCardConfigurationKey = 0x120

		# load flashloader into memory and execute it
		if runflashloader.execute(self) != 0:
			return

		# Write an sd_config_t to RAM (see https://github.com/apexrtos/imxrt1060_flashloader/blob/master/source/memory/src/sd_memory.c")
		print("> Configuring SD card: uSDHC1, 4-bit mode, no reset, SDR25 timing... ")
		if blhost('fill-memory', str(configurationMemoryAddress), '0x4', '0xD0001100') != 0:
			return

		# Configure SD card using sd_config_t we just wrote
		if blhost('configure-memory', str(sdCardConfigurationKey), str(configurationMemoryAddress)) != 0:
			return

		# Erase first 4MiB of SD card
		print("> Erasing first 4MiB of SD card...")
		if blhost('flash-erase-region', '0x0', '0x400000', str(sdCardConfigurationKey)) != 0:
			return

		# Write image to SD card
		fileName = os.environ['BOARD'] + "_usdhc"
		filePath = os.environ['BUILDDIR'] + "/"
		print("> Writing " + fileName + " to SD card...")
		if blhost('write-memory', '0x0', filePath + fileName, str(sdCardConfigurationKey), jsonOutput=False) != 0:
			return

		reset.execute(self)

class mmcflash(gdb.Command):
	"""Flash image into selected partition of MMC device
	Takes an MMC partition (boot1, boot2, user) as argument
	Sets the boot partition and boot bus parameters in the MMC device"""
	def __init__(self):
		super(mmcflash, self).__init__ ("mmcflash", gdb.COMMAND_USER)
	def invoke(self, args, from_tty):
		flashloader_mmcpartition = {
			'boot1' : ['0xC1111111', 'uSDHC1, 4 bit DDR, Normal Speed, Boot partition 1'],
			'boot2' : ['0xC2211111', 'uSDHC1, 4 bit DDR, Normal Speed, Boot partition 2'],
			'user'  : ['0xC0711111', 'uSDHC1, 4 bit DDR, Normal Speed, User Partition'],
		}

		if args not in flashloader_mmcpartition.keys():
			print("> " + args + " is not a valid MMC partition")
			print("> Valid MMC partitions: ", end = "")
			for key in flashloader_mmcpartition:
				print(key, end = ", ")
			print("")
			return

		configurationMemoryAddress = 0x20000000
		mmcConfigurationKey = 0x121

		# load flashloader into memory and execute it
		if runflashloader.execute(self) != 0:
			return

		# Write an mmc_config_t to RAM (see https://github.com/apexrtos/imxrt1060_flashloader/blob/master/source/memory/src/mmc_memory.c")
		print("> Configuring MMC device: " + flashloader_mmcpartition[args][1] + "... ")
		if blhost('fill-memory', str(configurationMemoryAddress), '0x4', flashloader_mmcpartition[args][0]) != 0:
			return

		if blhost('fill-memory', str(configurationMemoryAddress + 4), '0x4', '0x00000000') != 0:
			return

		# Configure MMC device using mmc_config_t we just wrote
		if blhost('configure-memory', str(mmcConfigurationKey), str(configurationMemoryAddress)) != 0:
			return

		# Erase first 4MiB of selected partition
		print("> Erasing first 4MiB of MMC device...")
		if blhost('flash-erase-region', '0x0', '0x400000', str(mmcConfigurationKey)) != 0:
			return

		# Flash image to selected partition
		fileName = os.environ['BOARD'] + "_usdhc"
		filePath = os.environ['BUILDDIR'] + "/"
		print("> Writing " + fileName + " to MMC device...")
		if blhost('write-memory', '0x0', filePath + fileName, str(mmcConfigurationKey), jsonOutput=False) != 0:
			return

		reset.execute(self)

reset()
loadbin()
freerun()
runflashloader()
sdflash()
mmcflash()

end

define connect
	python
if 'DEBUGGER' not in os.environ:
	gdb.write('DEBUGGER is not set\n')
elif os.environ['DEBUGGER'] == 'jlink':
	gdb.write('Connecting to jlink...\n')
	gdb.execute('target remote localhost:2331')
elif os.environ['DEBUGGER'] == 'trace32':
	gdb.write('Configuring trace32...\n')
	gdb.execute('target extended-remote localhost:30000')
	gdb.execute('mon b::reset')
	gdb.execute('mon b::system.reset')
	gdb.execute('mon b::system.cpu ' + trace32_cpu[os.environ['CPU']])
	gdb.execute('mon b::system.config.debugporttype swd')
	gdb.execute('mon b::system.config.connector mipi20t')
	gdb.execute('mon b::system.option.dualport on')
	gdb.execute('mon b::system.memaccess denied')
	gdb.execute('mon b::system.jtagclock 20MHz')
	gdb.execute('mon b::tronchip.set mmerr off')    # Don't trap on MemManage
	gdb.execute('mon b::tronchip.set nocperr off')  # Don't trap on NOCP
	gdb.execute('mon b::system.option imaskhll on')
	gdb.execute('mon b::system.option imaskasm on')
	gdb.execute('mon b::map.bonchip 0x60000000--0x7EFFFFFF')	# ROM
	gdb.execute('mon b::system.mode attach')
	gdb.execute('mon b::break')
	gdb.write('Connecting to target...\n')
	gdb.execute('disconnect')
	gdb.execute('target extended-remote localhost:30000')
else:
	gdb.write('Unknown debugger "' + os.environ['DEBUGGER'])
	end
end
document connect
	Usage: connect

	Connect to target via jtag debugger
end

define configure_trace
	# SW_MUX_CTL_PAD_GPIO_B0_04 ALT3 = ARM_TRACE0
	set *(int *)0x401F814C = 3
	# SW_MUX_CTL_PAD_GPIO_B0_05 ALT3 = ARM_TRACE1
	set *(int *)0x401F8150 = 3
	# SW_MUX_CTL_PAD_GPIO_B0_06 ALT3 = ARM_TRACE2
	set *(int *)0x401F8154 = 3
	# SW_MUX_CTL_PAD_GPIO_B0_07 ALT3 = ARM_TRACE3
	set *(int *)0x401F8158 = 3
	# SW_MUX_CTL_PAD_GPIO_B0_12 ALT2 = ARM_TRACE_CLK
	set *(int *)0x401F816C = 2
	python
if 'DEBUGGER' not in os.environ:
	gdb.write('DEBUGGER is not set\n')
elif os.environ['DEBUGGER'] == 'trace32':
	gdb.execute('mon b::tpiu.portsize 4')
	gdb.execute('mon b::tpiu.portmode continuous')
	gdb.execute('mon b::itm.datatrace correlateddata')
	gdb.execute('mon b::itm.on')
	gdb.execute('mon b::etm.trace on')
	gdb.execute('mon b::etm.cond all')
	gdb.execute('mon b::etm.on')
	gdb.execute('mon b::trace.method canalyzer')
	gdb.execute('mon b::canalyzer.autofocus')
	end
end
document configure_trace
	Usage: configure_trace

	Configure trace pin multiplexing & prepare debugger for tracing
end

define flash
	reset
	python
file = os.environ['BUILDDIR'] + '/' + os.environ['BOARD'] + '_flexspi'
if 'DEBUGGER' not in os.environ:
	gdb.write('DEBUGGER is not set\n')
elif os.environ['DEBUGGER'] == 'jlink':
	gdb.execute('mon loadbin ' + file + ' 0x60000000')
elif os.environ['DEBUGGER'] == 'trace32':
	gdb.execute('mon b::do ~~/demo/arm/flash/imxrt106x-qspi prepareonly')
	time.sleep(1)
	gdb.execute('mon b::flash.reprogram all')
	gdb.execute('mon b::data.load.binary ' + file + ' 0x60000000')
	gdb.execute('mon b::flash.reprogram off')
else:
	gdb.write('Unknown debugger "' + os.environ['DEBUGGER'])
	end
	reset
end
document flash
	Usage: flash

	Write image to FlexSPI connected flash device
end

define debug_boot
	reset
	symbol-file apex/boot/boot.elf
	b _start
	c
end
document debug_boot
	Usage: debug_boot

	Reset CPU and stop at entry to boot loader.
end

define debug_kernel
	reset
	symbol-file apex/sys/apex.elf
	b _start
	b __assert_fail
	c
	python
if 'DEBUGGER' not in os.environ:
	gdb.write('DEBUGGER is not set\n')
elif os.environ['DEBUGGER'] == 'trace32':
	gdb.execute('mon b::data.load.elf ' + os.environ['BUILDDIR'] + '/apex/sys/apex.elf /nocode')
	end
end
document debug_kernel
	Usage: debug_kernel

	Reset CPU and stop at entry to kernel.
end
